// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.26.0
// source: tag.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { IntFilter, StringFilter } from "./query";

export const protobufPackage = "post";

export interface TagDto {
  name: string;
}

export interface Tag {
  id: number;
  name: string;
  createdAt: string;
}

export interface Tags {
  tags: Tag[];
}

export interface TagWhere {
  id?: IntFilter | undefined;
  name?: StringFilter | undefined;
}

export interface TagWhereUnique {
  id: number;
  name?: string | undefined;
}

export interface TagFindParams {
  where?: TagWhere | undefined;
  skip?: number | undefined;
  take?: number | undefined;
  orderBy?: string | undefined;
  select?: TagSelect | undefined;
}

export interface TagSelect {
  id?: boolean | undefined;
  name?: boolean | undefined;
  createdAt?: boolean | undefined;
}

export const POST_PACKAGE_NAME = "post";

export interface TagServiceClient {
  create(request: TagDto): Observable<Tag>;

  update(request: TagDto): Observable<Tag>;

  find(request: TagFindParams): Observable<Tags>;

  findOne(request: TagWhereUnique): Observable<Tag>;

  delete(request: TagWhereUnique): Observable<Tag>;
}

export interface TagServiceController {
  create(request: TagDto): Promise<Tag> | Observable<Tag> | Tag;

  update(request: TagDto): Promise<Tag> | Observable<Tag> | Tag;

  find(request: TagFindParams): Promise<Tags> | Observable<Tags> | Tags;

  findOne(request: TagWhereUnique): Promise<Tag> | Observable<Tag> | Tag;

  delete(request: TagWhereUnique): Promise<Tag> | Observable<Tag> | Tag;
}

export function TagServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "update", "find", "findOne", "delete"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TagService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TagService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TAG_SERVICE_NAME = "TagService";
