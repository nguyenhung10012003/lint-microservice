// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.26.0
// source: like.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Count } from "./count";

export const protobufPackage = "interaction";

export interface LikeDto {
  userId: string;
  postId: string;
}

export interface Like {
  id: string;
  userId: string;
  postId: string;
  createdAt: string;
}

export interface LikeWhere {
  id?: string | undefined;
  userId?: string | undefined;
  postId?: string | undefined;
}

export interface LikeWhereUnique {
  id: string;
  userId?: string | undefined;
  postId?: string | undefined;
}

export interface LikeParams {
  where?: LikeWhere | undefined;
  take?: number | undefined;
  skip?: number | undefined;
}

export interface LikeId {
  id: string;
}

export interface Likes {
  likes: Like[];
}

export interface Exist {
  exist: boolean;
}

export const INTERACTION_PACKAGE_NAME = "interaction";

export interface LikeServiceClient {
  create(request: LikeDto): Observable<Like>;

  delete(request: LikeWhereUnique): Observable<Like>;

  find(request: LikeParams): Observable<Likes>;

  count(request: LikeWhere): Observable<Count>;

  exists(request: LikeWhere): Observable<Exist>;
}

export interface LikeServiceController {
  create(request: LikeDto): Promise<Like> | Observable<Like> | Like;

  delete(request: LikeWhereUnique): Promise<Like> | Observable<Like> | Like;

  find(request: LikeParams): Promise<Likes> | Observable<Likes> | Likes;

  count(request: LikeWhere): Promise<Count> | Observable<Count> | Count;

  exists(request: LikeWhere): Promise<Exist> | Observable<Exist> | Exist;
}

export function LikeServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "delete", "find", "count", "exists"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("LikeService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("LikeService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const LIKE_SERVICE_NAME = "LikeService";
