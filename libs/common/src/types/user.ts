// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.26.0
// source: user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { ProfileMessage } from "./profile";

export const protobufPackage = "user";

export enum Order {
  ASC = 0,
  DESC = 1,
  UNRECOGNIZED = -1,
}

export interface UserId {
  id: string;
}

export interface UserMessage {
  id: string;
  email: string;
  password: string;
  profile?: ProfileMessage | undefined;
  createdAt: number;
  updatedAt: number;
}

export interface CreateUserDto {
  email: string;
  password: string;
}

export interface UpdateUserDto {
  id: string;
  email?: string | undefined;
  password?: string | undefined;
}

export interface UsersMessage {
  users: UserMessage[];
}

export interface FindAllParams {
  skip?: number | undefined;
  take?: number | undefined;
  select?: UserSelect | undefined;
  orderBy?: UserOrderBy | undefined;
  where?: UserWhere | undefined;
}

export interface FindOneParams {
  id?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
  createdAt?: NumberFilter | undefined;
  updatedAt?: NumberFilter | undefined;
}

export interface UserSelect {
  id?: boolean | undefined;
  email?: boolean | undefined;
  password?: boolean | undefined;
  profile?: boolean | undefined;
  createdAt?: boolean | undefined;
  updatedAt?: boolean | undefined;
}

export interface UserOrderBy {
  email?: Order | undefined;
  password?: Order | undefined;
  createdAt?: Order | undefined;
  updatedAt?: Order | undefined;
}

export interface UserWhere {
  id?: StringFilter | undefined;
  email?: StringFilter | undefined;
  password?: StringFilter | undefined;
  createdAt?: NumberFilter | undefined;
  updatedAt?: NumberFilter | undefined;
  AND: UserWhere[];
  OR: UserWhere[];
}

export interface StringFilter {
  equals?: string | undefined;
  ne?: string | undefined;
  in: string[];
  notIn: string[];
  search?: string | undefined;
  contains?: string | undefined;
}

export interface NumberFilter {
  eq?: number | undefined;
  ne?: number | undefined;
  gt?: number | undefined;
  gte?: number | undefined;
  lt?: number | undefined;
  lte?: number | undefined;
}

export const USER_PACKAGE_NAME = "user";

export interface UserServiceClient {
  findAll(request: FindAllParams): Observable<UsersMessage>;

  findOne(request: FindOneParams): Observable<UserMessage>;

  findById(request: UserId): Observable<UserMessage>;

  create(request: CreateUserDto): Observable<UserMessage>;

  update(request: UpdateUserDto): Observable<UserMessage>;

  delete(request: UserId): Observable<UserMessage>;
}

export interface UserServiceController {
  findAll(request: FindAllParams): Promise<UsersMessage> | Observable<UsersMessage> | UsersMessage;

  findOne(request: FindOneParams): Promise<UserMessage> | Observable<UserMessage> | UserMessage;

  findById(request: UserId): Promise<UserMessage> | Observable<UserMessage> | UserMessage;

  create(request: CreateUserDto): Promise<UserMessage> | Observable<UserMessage> | UserMessage;

  update(request: UpdateUserDto): Promise<UserMessage> | Observable<UserMessage> | UserMessage;

  delete(request: UserId): Promise<UserMessage> | Observable<UserMessage> | UserMessage;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findAll", "findOne", "findById", "create", "update", "delete"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
