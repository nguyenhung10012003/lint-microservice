// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.26.0
// source: media.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "post";

export enum MediaType {
  IMAGE = 0,
  VIDEO = 1,
  AUDIO = 2,
  UNRECOGNIZED = -1,
}

export interface MediaDto {
  postId?: string;
  url: string;
  type: MediaType;
  width?: number | undefined;
  height?: number | undefined;
  duration?: number | undefined;
}

export interface Media {
  id: number;
  postId: string;
  url: string;
  type: MediaType;
  width?: number | undefined;
  height?: number | undefined;
  duration?: number | undefined;
}

export interface Medias {
  medias: Media[];
}

export interface MediaWhere {
  id?: number | undefined;
  postId?: string | undefined;
}

export interface MediaWhereUnique {
  id?: number | undefined;
}

export interface MediaFindParams {
  where?: MediaWhere | undefined;
  skip?: number | undefined;
  take?: number | undefined;
  orderBy?: string | undefined;
  select?: MediaSelect | undefined;
}

export interface MediaSelect {
  id?: boolean | undefined;
  postId?: boolean | undefined;
  url?: boolean | undefined;
  type?: boolean | undefined;
  width?: boolean | undefined;
  height?: boolean | undefined;
  duration?: boolean | undefined;
}

export const POST_PACKAGE_NAME = "post";

export interface MediaServiceClient {
  create(request: MediaDto): Observable<Media>;

  update(request: MediaDto): Observable<Media>;

  find(request: MediaFindParams): Observable<Medias>;

  findOne(request: MediaWhereUnique): Observable<Media>;

  delete(request: MediaWhereUnique): Observable<Media>;
}

export interface MediaServiceController {
  create(request: MediaDto): Promise<Media> | Observable<Media> | Media;

  update(request: MediaDto): Promise<Media> | Observable<Media> | Media;

  find(request: MediaFindParams): Promise<Medias> | Observable<Medias> | Medias;

  findOne(request: MediaWhereUnique): Promise<Media> | Observable<Media> | Media;

  delete(request: MediaWhereUnique): Promise<Media> | Observable<Media> | Media;
}

export function MediaServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "update", "find", "findOne", "delete"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("MediaService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("MediaService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const MEDIA_SERVICE_NAME = "MediaService";
