// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.26.0
// source: profile.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./empty";

export const protobufPackage = "user";

export interface ProfileMessage {
  id: string;
  name: string;
  avatar: string;
  bio: string;
  dob: string;
  country: string;
  gender: string;
  alias: string;
}

export interface ProfilesMessage {
  profiles: ProfileMessage[];
}

export interface Id {
  id: string;
}

export interface ProfileDto {
  name?: string | undefined;
  avatar?: string | undefined;
  bio?: string | undefined;
  dob?: string | undefined;
  country?: string | undefined;
  gender?: string | undefined;
  alias?: string | undefined;
  userId: string;
}

export const USER_PACKAGE_NAME = "user";

export interface ProfileServiceClient {
  findAll(request: Empty): Observable<ProfilesMessage>;

  findById(request: Id): Observable<ProfileMessage>;

  findByUserId(request: Id): Observable<ProfileMessage>;

  create(request: ProfileDto): Observable<ProfileMessage>;

  update(request: ProfileDto): Observable<ProfileMessage>;

  delete(request: Id): Observable<Empty>;
}

export interface ProfileServiceController {
  findAll(request: Empty): Promise<ProfilesMessage> | Observable<ProfilesMessage> | ProfilesMessage;

  findById(request: Id): Promise<ProfileMessage> | Observable<ProfileMessage> | ProfileMessage;

  findByUserId(request: Id): Promise<ProfileMessage> | Observable<ProfileMessage> | ProfileMessage;

  create(request: ProfileDto): Promise<ProfileMessage> | Observable<ProfileMessage> | ProfileMessage;

  update(request: ProfileDto): Promise<ProfileMessage> | Observable<ProfileMessage> | ProfileMessage;

  delete(request: Id): Promise<Empty> | Observable<Empty> | Empty;
}

export function ProfileServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findAll", "findById", "findByUserId", "create", "update", "delete"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProfileService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProfileService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PROFILE_SERVICE_NAME = "ProfileService";
