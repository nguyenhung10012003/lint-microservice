// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.26.0
// source: blacklist.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'relationship';

export interface BlacklistDto {
  userId: string;
  list: UserId[];
}

export interface Blacklist {
  id: string;
  userId: string;
  list: UserId[];
}

export interface BlacklistWhereUnique {
  id?: string | undefined;
  userId: string;
  and?: BlacklistWhere[];
}

export interface BlacklistWhere {
  id?: string | undefined;
  userId?: string | undefined;
  and: BlacklistWhere[];
}

export interface UserId {
  id: string;
}

export const RELATIONSHIP_PACKAGE_NAME = 'relationship';

export interface BlacklistServiceClient {
  update(request: BlacklistDto): Observable<Blacklist>;

  findOne(request: BlacklistWhereUnique): Observable<Blacklist>;
}

export interface BlacklistServiceController {
  update(
    request: BlacklistDto,
  ): Promise<Blacklist> | Observable<Blacklist> | Blacklist;

  findOne(
    request: BlacklistWhereUnique,
  ): Promise<Blacklist> | Observable<Blacklist> | Blacklist;
}

export function BlacklistServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['update', 'findOne'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('BlacklistService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('BlacklistService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const BLACKLIST_SERVICE_NAME = 'BlacklistService';
