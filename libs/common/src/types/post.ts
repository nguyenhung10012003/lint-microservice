// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.26.0
// source: post.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { Media, MediaDto } from './media';
import { DateTimeFilter, SortOrder, StringFilter } from './query';
import { Tag, TagDto } from './tag';

export const protobufPackage = 'post';

export enum PostScope {
  PUBLIC = 0,
  PRIVATE = 1,
  UNRECOGNIZED = -1,
}

export interface PostDto {
  userId: string;
  content?: string | undefined;
  views?: number | undefined;
  share?: number | undefined;
  medias: MediaDto[];
  tags: TagDto[];
  sourceId?: string | undefined;
  scope?: PostScope | undefined;
}

export interface Post {
  id: string;
  userId: string;
  content?: string | undefined;
  views: number;
  share: number;
  medias?: Media[];
  tags?: Tag[];
  sourceId?: string | undefined;
  scope?: PostScope | undefined;
  sourcePost?: Post | undefined;
  createdAt: string;
  updatedAt: string;
}

export interface Posts {
  posts: Post[];
}

export interface PostWhere {
  id?: StringFilter | undefined;
  userId?: StringFilter | undefined;
  createdAt?: DateTimeFilter | undefined;
}

export interface PostWhereUnique {
  id: string;
  userId?: string | undefined;
}

export interface PostFindParams {
  where?: PostWhere | undefined;
  skip?: number | undefined;
  take?: number | undefined;
  orderBy?: PostOrderBy | undefined;
  select?: PostSelect | undefined;
}

export interface PostOrderBy {
  id?: SortOrder | undefined;
  userId?: SortOrder | undefined;
  content?: SortOrder | undefined;
  views?: SortOrder | undefined;
  share?: SortOrder | undefined;
  medias?: SortOrder | undefined;
  tags?: SortOrder | undefined;
  sourceId?: SortOrder | undefined;
  scope?: SortOrder | undefined;
  sourcePost?: SortOrder | undefined;
  createdAt?: SortOrder | undefined;
  updatedAt?: SortOrder | undefined;
}

export interface PostSelect {
  id?: boolean | undefined;
  userId?: boolean | undefined;
  content?: boolean | undefined;
  views?: boolean | undefined;
  share?: boolean | undefined;
  medias?: boolean | undefined;
  tags?: boolean | undefined;
  sourceId?: boolean | undefined;
  scope?: boolean | undefined;
  sourcePost?: boolean | undefined;
  createdAt?: boolean | undefined;
  updatedAt?: boolean | undefined;
}

export const POST_PACKAGE_NAME = 'post';

export interface PostServiceClient {
  create(request: PostDto): Observable<Post>;

  update(request: PostDto): Observable<Post>;

  find(request: PostFindParams): Observable<Posts>;

  findOne(request: PostWhereUnique): Observable<Post>;

  delete(request: PostWhereUnique): Observable<Post>;
}

export interface PostServiceController {
  create(request: PostDto): Promise<Post> | Observable<Post> | Post;

  update(request: PostDto): Promise<Post> | Observable<Post> | Post;

  find(request: PostFindParams): Promise<Posts> | Observable<Posts> | Posts;

  findOne(request: PostWhereUnique): Promise<Post> | Observable<Post> | Post;

  delete(request: PostWhereUnique): Promise<Post> | Observable<Post> | Post;
}

export function PostServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'create',
      'update',
      'find',
      'findOne',
      'delete',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('PostService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('PostService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const POST_SERVICE_NAME = 'PostService';
