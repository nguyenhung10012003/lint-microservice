// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.26.0
// source: comment.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { Count } from './count';

export const protobufPackage = 'interaction';

export interface CommentDto {
  userId: string;
  postId: string;
  content: string;
}

export interface CommentUpdateDto {
  id: string;
  userId?: string | undefined;
  postId?: string | undefined;
  content?: string | undefined;
}

export interface Comment {
  id: string;
  userId: string;
  postId: string;
  content: string;
  createdAt: string;
  updatedAt: string;
  replies?: Reply[];
}

export interface CommentWhere {
  id?: string | undefined;
  userId?: string | undefined;
  postId?: string | undefined;
  content?: string | undefined;
}

export interface CommentWhereUnique {
  id: string;
  userId?: string | undefined;
  postId?: string | undefined;
  content?: string | undefined;
}

export interface CommentSelect {
  id?: boolean | undefined;
  userId?: boolean | undefined;
  postId?: boolean | undefined;
  content?: boolean | undefined;
  createdAt?: boolean | undefined;
  updatedAt?: boolean | undefined;
  replies?: boolean | undefined;
}

export interface CommentParams {
  where?: CommentWhere | undefined;
  take?: number | undefined;
  skip?: number | undefined;
  select?: CommentSelect | undefined;
}

export interface CommentId {
  id: string;
}

export interface ReplyDto {
  userId: string;
  commentId: string;
  content: string;
}

export interface ReplyUpdateDto {
  id: string;
  userId?: string | undefined;
  commentId?: string | undefined;
  content?: string | undefined;
}

export interface Reply {
  id: string;
  userId: string;
  commentId: string;
  content: string;
  createdAt: string;
  updatedAt: string;
}

export interface ReplyWhere {
  id?: string | undefined;
  userId?: string | undefined;
  commentId?: string | undefined;
  content?: string | undefined;
}

export interface ReplyWhereUnique {
  id: string;
  userId?: string | undefined;
  commentId?: string | undefined;
  content?: string | undefined;
}

export interface ReplySelect {
  id?: boolean | undefined;
  userId?: boolean | undefined;
  commentId?: boolean | undefined;
  content?: boolean | undefined;
}

export interface ReplyParams {
  where?: ReplyWhere | undefined;
  take?: number | undefined;
  skip?: number | undefined;
  select?: ReplySelect | undefined;
}

export interface ReplyId {
  id: string;
}

export interface Comments {
  comments: Comment[];
}

export interface Replies {
  replies: Reply[];
}

export const INTERACTION_PACKAGE_NAME = 'interaction';

export interface CommentServiceClient {
  create(request: CommentDto): Observable<Comment>;

  delete(request: CommentId): Observable<Comment>;

  find(request: CommentParams): Observable<Comments>;

  findOne(request: CommentWhereUnique): Observable<Comment>;

  update(request: CommentUpdateDto): Observable<Comment>;

  count(request: CommentWhere): Observable<Count>;
}

export interface CommentServiceController {
  create(request: CommentDto): Promise<Comment> | Observable<Comment> | Comment;

  delete(request: CommentId): Promise<Comment> | Observable<Comment> | Comment;

  find(
    request: CommentParams,
  ): Promise<Comments> | Observable<Comments> | Comments;

  findOne(
    request: CommentWhereUnique,
  ): Promise<Comment> | Observable<Comment> | Comment;

  update(
    request: CommentUpdateDto,
  ): Promise<Comment> | Observable<Comment> | Comment;

  count(request: CommentWhere): Promise<Count> | Observable<Count> | Count;
}

export function CommentServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'create',
      'delete',
      'find',
      'findOne',
      'update',
      'count',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('CommentService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('CommentService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const COMMENT_SERVICE_NAME = 'CommentService';

export interface ReplyServiceClient {
  create(request: ReplyDto): Observable<Reply>;

  delete(request: ReplyWhereUnique): Observable<Reply>;

  find(request: ReplyParams): Observable<Replies>;

  findOne(request: ReplyWhereUnique): Observable<Reply>;

  update(request: ReplyUpdateDto): Observable<Reply>;
}

export interface ReplyServiceController {
  create(request: ReplyDto): Promise<Reply> | Observable<Reply> | Reply;

  delete(request: ReplyWhereUnique): Promise<Reply> | Observable<Reply> | Reply;

  find(request: ReplyParams): Promise<Replies> | Observable<Replies> | Replies;

  findOne(
    request: ReplyWhereUnique,
  ): Promise<Reply> | Observable<Reply> | Reply;

  update(request: ReplyUpdateDto): Promise<Reply> | Observable<Reply> | Reply;
}

export function ReplyServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'create',
      'delete',
      'find',
      'findOne',
      'update',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('ReplyService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('ReplyService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const REPLY_SERVICE_NAME = 'ReplyService';
